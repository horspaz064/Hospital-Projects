/*!
 * devextreme-angular
 * Version: 23.2.11
 * Build date: Mon Dec 16 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { Component, EventEmitter, } from '@angular/core';
import render from 'devextreme/core/renderer';
import { triggerHandler } from 'devextreme/events';
import domAdapter from 'devextreme/core/dom_adapter';
import { getElement } from './utils';
import { DX_TEMPLATE_WRAPPER_CLASS } from './template';
import * as i0 from "@angular/core";
const VISIBILITY_CHANGE_SELECTOR = 'dx-visibility-change-handler';
export class BaseNestedOption {
    constructor() {
        this._initialOptions = {};
        this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this), this._filterItems.bind(this));
    }
    _optionChangedHandler(e) {
        const fullOptionPath = this._fullOptionPath();
        if (e.fullName.indexOf(fullOptionPath) === 0) {
            const optionName = e.fullName.slice(fullOptionPath.length);
            const emitter = this[`${optionName}Change`];
            if (emitter) {
                emitter.next(e.value);
            }
        }
    }
    _createEventEmitters(events) {
        events.forEach((event) => {
            this[event.emit] = new EventEmitter();
        });
    }
    _getOption(name) {
        if (this.isLinked) {
            return this.instance.option(this._fullOptionPath() + name);
        }
        return this._initialOptions[name];
    }
    _setOption(name, value) {
        if (this.isLinked) {
            const fullPath = this._fullOptionPath() + name;
            this.instance.option(fullPath, value);
        }
        else {
            this._initialOptions[name] = value;
        }
    }
    _addRemovedOption(name) {
        if (this.instance && this.removedNestedComponents) {
            this.removedNestedComponents.push(name);
        }
    }
    _deleteRemovedOptions(name) {
        if (this.instance && this.removedNestedComponents) {
            this.removedNestedComponents = this.removedNestedComponents.filter((x) => !x.startsWith(name));
        }
    }
    _addRecreatedComponent() {
        if (this.instance && this.recreatedNestedComponents) {
            this.recreatedNestedComponents.push({ getOptionPath: () => this._getOptionPath() });
        }
    }
    _getOptionPath() {
        return this._hostOptionPath() + this._optionPath;
    }
    setHost(host, optionPath) {
        this._host = host;
        this._hostOptionPath = optionPath;
        this.optionChangedHandlers.subscribe(this._optionChangedHandler.bind(this));
    }
    setChildren(propertyName, items) {
        this.resetOptions(propertyName);
        return this._collectionContainerImpl.setChildren(propertyName, items);
    }
    _filterItems(items) {
        return items.filter((item) => item !== this);
    }
    get instance() {
        return this._host && this._host.instance;
    }
    get resetOptions() {
        return this._host && this._host.resetOptions;
    }
    get isRecreated() {
        return this._host && this._host.isRecreated;
    }
    get removedNestedComponents() {
        return this._host && this._host.removedNestedComponents;
    }
    set removedNestedComponents(value) {
        this._host.removedNestedComponents = value;
    }
    get recreatedNestedComponents() {
        return this._host && this._host.recreatedNestedComponents;
    }
    set recreatedNestedComponents(value) {
        this._host.recreatedNestedComponents = value;
    }
    get isLinked() {
        return !!this.instance && this._host.isLinked;
    }
    get optionChangedHandlers() {
        return this._host && this._host.optionChangedHandlers;
    }
}
/** @nocollapse */ BaseNestedOption.ɵfac = function BaseNestedOption_Factory(t) { return new (t || BaseNestedOption)(); };
/** @nocollapse */ BaseNestedOption.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: BaseNestedOption, selectors: [["ng-component"]], decls: 0, vars: 0, template: function BaseNestedOption_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseNestedOption, [{
        type: Component,
        args: [{
                template: '',
            }]
    }], function () { return []; }, null); })();
export class CollectionNestedOptionContainerImpl {
    constructor(_setOption, _filterItems) {
        this._setOption = _setOption;
        this._filterItems = _filterItems;
        this._activatedQueries = {};
    }
    setChildren(propertyName, items) {
        if (this._filterItems) {
            items = this._filterItems(items);
        }
        if (items.length) {
            this._activatedQueries[propertyName] = true;
        }
        if (this._activatedQueries[propertyName]) {
            const widgetItems = items.map((item, index) => {
                item._index = index;
                return item._value;
            });
            this._setOption(propertyName, widgetItems);
        }
    }
}
export class NestedOption extends BaseNestedOption {
    setHost(host, optionPath) {
        super.setHost(host, optionPath);
        this._host[this._optionPath] = this._initialOptions;
    }
    _fullOptionPath() {
        return `${this._getOptionPath()}.`;
    }
}
/** @nocollapse */ NestedOption.ɵfac = /** @pureOrBreakMyCode */ function () { let ɵNestedOption_BaseFactory; return function NestedOption_Factory(t) { return (ɵNestedOption_BaseFactory || (ɵNestedOption_BaseFactory = i0.ɵɵgetInheritedFactory(NestedOption)))(t || NestedOption); }; }();
/** @nocollapse */ NestedOption.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: NestedOption, selectors: [["ng-component"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function NestedOption_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NestedOption, [{
        type: Component,
        args: [{
                template: '',
            }]
    }], null, null); })();
export class CollectionNestedOption extends BaseNestedOption {
    _fullOptionPath() {
        return `${this._getOptionPath()}[${this._index}].`;
    }
    get _value() {
        return this._initialOptions;
    }
    get isLinked() {
        return this._index !== undefined && !!this.instance && this._host.isLinked;
    }
}
/** @nocollapse */ CollectionNestedOption.ɵfac = /** @pureOrBreakMyCode */ function () { let ɵCollectionNestedOption_BaseFactory; return function CollectionNestedOption_Factory(t) { return (ɵCollectionNestedOption_BaseFactory || (ɵCollectionNestedOption_BaseFactory = i0.ɵɵgetInheritedFactory(CollectionNestedOption)))(t || CollectionNestedOption); }; }();
/** @nocollapse */ CollectionNestedOption.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: CollectionNestedOption, selectors: [["ng-component"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function CollectionNestedOption_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CollectionNestedOption, [{
        type: Component,
        args: [{
                template: '',
            }]
    }], null, null); })();
const triggerShownEvent = function (element) {
    const changeHandlers = [];
    if (!render(element).hasClass(VISIBILITY_CHANGE_SELECTOR)) {
        changeHandlers.push(element);
    }
    changeHandlers.push.apply(changeHandlers, element.querySelectorAll(`.${VISIBILITY_CHANGE_SELECTOR}`));
    for (let i = 0; i < changeHandlers.length; i++) {
        triggerHandler(changeHandlers[i], 'dxshown');
    }
};
export function extractTemplate(option, element, renderer, document) {
    if (!option.template === undefined || !element.nativeElement.hasChildNodes()) {
        return;
    }
    const childNodes = [].slice.call(element.nativeElement.childNodes);
    const userContent = childNodes.filter((n) => {
        if (n.tagName) {
            const tagNamePrefix = n.tagName.toLowerCase().substr(0, 3);
            return !(tagNamePrefix === 'dxi' || tagNamePrefix === 'dxo');
        }
        return n.nodeName !== '#comment' && n.textContent.replace(/\s/g, '').length;
    });
    if (!userContent.length) {
        return;
    }
    option.template = {
        render: (renderData) => {
            const result = element.nativeElement;
            domAdapter.setClass(result, DX_TEMPLATE_WRAPPER_CLASS, true);
            if (renderData.container) {
                const container = getElement(renderData.container);
                const resultInContainer = container.contains(element.nativeElement);
                renderer.appendChild(container, element.nativeElement);
                if (!resultInContainer) {
                    const resultInBody = document.body.contains(container);
                    if (resultInBody) {
                        triggerShownEvent(result);
                    }
                }
            }
            return result;
        },
    };
}
export class NestedOptionHost {
    getHost() {
        return this._host;
    }
    setHost(host, optionPath) {
        this._host = host;
        this._optionPath = optionPath || (() => '');
    }
    setNestedOption(nestedOption) {
        nestedOption.setHost(this._host, this._optionPath);
    }
}
//# sourceMappingURL=data:application/json;base64,