/*!
 * devextreme-angular
 * Version: 23.2.11
 * Build date: Mon Dec 16 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoEdgesComponent extends NestedOption {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get customDataExpr() {
        return this._getOption('customDataExpr');
    }
    set customDataExpr(value) {
        this._setOption('customDataExpr', value);
    }
    get dataSource() {
        return this._getOption('dataSource');
    }
    set dataSource(value) {
        this._setOption('dataSource', value);
    }
    get fromExpr() {
        return this._getOption('fromExpr');
    }
    set fromExpr(value) {
        this._setOption('fromExpr', value);
    }
    get fromLineEndExpr() {
        return this._getOption('fromLineEndExpr');
    }
    set fromLineEndExpr(value) {
        this._setOption('fromLineEndExpr', value);
    }
    get fromPointIndexExpr() {
        return this._getOption('fromPointIndexExpr');
    }
    set fromPointIndexExpr(value) {
        this._setOption('fromPointIndexExpr', value);
    }
    get keyExpr() {
        return this._getOption('keyExpr');
    }
    set keyExpr(value) {
        this._setOption('keyExpr', value);
    }
    get lineTypeExpr() {
        return this._getOption('lineTypeExpr');
    }
    set lineTypeExpr(value) {
        this._setOption('lineTypeExpr', value);
    }
    get lockedExpr() {
        return this._getOption('lockedExpr');
    }
    set lockedExpr(value) {
        this._setOption('lockedExpr', value);
    }
    get pointsExpr() {
        return this._getOption('pointsExpr');
    }
    set pointsExpr(value) {
        this._setOption('pointsExpr', value);
    }
    get styleExpr() {
        return this._getOption('styleExpr');
    }
    set styleExpr(value) {
        this._setOption('styleExpr', value);
    }
    get textExpr() {
        return this._getOption('textExpr');
    }
    set textExpr(value) {
        this._setOption('textExpr', value);
    }
    get textStyleExpr() {
        return this._getOption('textStyleExpr');
    }
    set textStyleExpr(value) {
        this._setOption('textStyleExpr', value);
    }
    get toExpr() {
        return this._getOption('toExpr');
    }
    set toExpr(value) {
        this._setOption('toExpr', value);
    }
    get toLineEndExpr() {
        return this._getOption('toLineEndExpr');
    }
    set toLineEndExpr(value) {
        this._setOption('toLineEndExpr', value);
    }
    get toPointIndexExpr() {
        return this._getOption('toPointIndexExpr');
    }
    set toPointIndexExpr(value) {
        this._setOption('toPointIndexExpr', value);
    }
    get zIndexExpr() {
        return this._getOption('zIndexExpr');
    }
    set zIndexExpr(value) {
        this._setOption('zIndexExpr', value);
    }
    get _optionPath() {
        return 'edges';
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
}
/** @nocollapse */ DxoEdgesComponent.ɵfac = function DxoEdgesComponent_Factory(t) { return new (t || DxoEdgesComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxoEdgesComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoEdgesComponent, selectors: [["dxo-edges"]], inputs: { customDataExpr: "customDataExpr", dataSource: "dataSource", fromExpr: "fromExpr", fromLineEndExpr: "fromLineEndExpr", fromPointIndexExpr: "fromPointIndexExpr", keyExpr: "keyExpr", lineTypeExpr: "lineTypeExpr", lockedExpr: "lockedExpr", pointsExpr: "pointsExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", toExpr: "toExpr", toLineEndExpr: "toLineEndExpr", toPointIndexExpr: "toPointIndexExpr", zIndexExpr: "zIndexExpr" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoEdgesComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoEdgesComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-edges',
                template: '',
                styles: [''],
                providers: [NestedOptionHost]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { customDataExpr: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], fromExpr: [{
            type: Input
        }], fromLineEndExpr: [{
            type: Input
        }], fromPointIndexExpr: [{
            type: Input
        }], keyExpr: [{
            type: Input
        }], lineTypeExpr: [{
            type: Input
        }], lockedExpr: [{
            type: Input
        }], pointsExpr: [{
            type: Input
        }], styleExpr: [{
            type: Input
        }], textExpr: [{
            type: Input
        }], textStyleExpr: [{
            type: Input
        }], toExpr: [{
            type: Input
        }], toLineEndExpr: [{
            type: Input
        }], toPointIndexExpr: [{
            type: Input
        }], zIndexExpr: [{
            type: Input
        }] }); })();
export class DxoEdgesModule {
}
/** @nocollapse */ DxoEdgesModule.ɵfac = function DxoEdgesModule_Factory(t) { return new (t || DxoEdgesModule)(); };
/** @nocollapse */ DxoEdgesModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxoEdgesModule });
/** @nocollapse */ DxoEdgesModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoEdgesModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoEdgesComponent
                ],
                exports: [
                    DxoEdgesComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxoEdgesModule, { declarations: [DxoEdgesComponent], exports: [DxoEdgesComponent] }); })();
//# sourceMappingURL=data:application/json;base64,